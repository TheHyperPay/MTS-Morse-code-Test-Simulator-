#pragma warning(disable:4996)
#include <stdio.h>
#include <Windows.h>
#include <ctype.h>
#include <string.h>
#include <malloc.h>

#define SAFE_DELETE(ptr)                 do { free(ptr); (ptr) = NULL; } while(0)
#define CAPPING(char_array)              strupr(char_array)

#define MORSENUM                        36
#define SND_FREQUENCY					400
#define SND_FREQUENCY_NONE				0
#define SND_GAP							100
#define SND_SEP_CODE					50
#define SND_SEP_LETTER					150
#define SND_SEP_WORD					300
#define SND_BAR_RCV						{Beep(SND_FREQUENCY, SND_GAP * 3);	Sleep(SND_SEP_CODE * 3);}
#define SND_DOT_RCV						{Beep(SND_FREQUENCY, SND_GAP);		Sleep(SND_SEP_CODE * 3);}
#define SND_END_OF_LETTER				Beep(0, SND_SEP_LETTER);
#define SND_END_OF_WORD					Beep(0, SND_SEP_WORD);

typedef struct
{
    char alpha;
    const char* morseCode;
}MorseElements;

MorseElements alphaMorse[MORSENUM] = { {'A', ".-"}, {'B', "-..."}, {'C', "-.-."},
                                        {'D', "-.."}, {'E', "."}, {'F', "..-."},
                                        {'G', "--."}, {'H', "...."}, {'I', ".."},
                                        {'J', ".."}, {'K', "-.-"}, {'L', ".-.."},
                                        {'M', "--"}, {'N', "-."}, {'O', "---"},
                                        {'P', ".--."}, {'Q', "--.-"}, {'R', ".-."},
                                        {'S', "..."}, {'T', "-"}, {'U', "..-"},
                                        {'V', "...-"}, {'W', ".--"}, {'X', "-..-"},
                                        {'Y', "-.--"}, {'Z', "--.."}, {'0', "-----"},
                                        {'1', ".----"}, {'2', "..---"}, {'3', "...--"},
                                        {'4', "....-"}, {'5', "....."}, {'6', "-...."}, 
                                        {'7', "--..."}, {'8', "---.."}, {'9', "----."}
};

const char* alphaToMorse(char alpha) {
    for (int i = 0; alphaMorse[i].alpha != NULL; i++) {
        if (alpha == alphaMorse[i].alpha) {
            return alphaMorse[i].morseCode;
        }
    }
}

void playMorseSound(const char* morseMessage) {
    if (morseMessage == NULL) {
        return;
    }

    for (int i = 0; morseMessage[i] != NULL; i++) {
        if (morseMessage[i] == '.') {
            SND_DOT_RCV;
        }
        else if (morseMessage[i] == '-') {
            SND_BAR_RCV;
        }
        else if (morseMessage[i] == ' ') {
            SND_END_OF_LETTER;
        }
    }
}

void morseSound(char* message) {
    CAPPING(message);

    for (int i = 0; message[i] != NULL; i++) {
        const char* morseMessage = alphaToMorse(message[i]);
        printf("%c : %s\n", message[i], morseMessage);
        playMorseSound(morseMessage);
    }
}

int main() {
    char message[] = "turn right";

    morseSound(message);

    return 0;
}
